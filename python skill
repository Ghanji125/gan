18个高效Python编程技巧

1.交换变量

a=3
b=6
a,b = b,a
#print(a,b)
#63


2.字典推导(Dictionary comprehensions) 和 集合推导(Set comprehensions) 和 列表推导(list comprehensions)

#推导就是在原有列表、集合、字典的基础上快速创建新的列表、集合、字典

some_list = [1,2,3,4,5]
another_list = [x + 1 for x in some_list]
#another_list
#[2,3,4,5,6]

#Set Comprehensions				#set() has no repeat values and unordered
some_list = [1,2,3,4,5,2,5,1,4,8]
even_set = {x for x in some_list if x%2 == 0}   #'%'整除符
#even_set
#set{[8,2,4]}

myset = {1,2,3,4,3,2,1}
#myset
#set{[1,2,3,4]}

#Dictionary Comprehensions
dict = {x: x%2 == 0 for x in range(1,5)}
#dict
#{1:False, 2:True, 3:False, 4:True}


3.计数 时使用 Counter 计数 对象

#它是python的collections类库中内置dict类的子类
from collections import Counter
c = Counter("hello world")
#c
#Counter({'l':3,'o':2,'e':1,'d':1,'h':1,'r':1,'w':1})
c.most_common(2)
#[('l',3),('o',2)]


4.打印json  （运用indention）   #另一个pprint模块也差不多效果

import json
print(json.dumps(data))		#No indention
#{"status":"OK","count":2,"results":[{"age":27,"name":"Oz","lactose_intolerant":True},{"age":29,"name":"Joe","lactose_intolerant":False}]}

print(json.dumps(data))		#With indention
#{
#	"status":"OK",
#	"count":2,
#	"results":[
#		{
#		"age":27,
#		"name":"Oz",
#		"lactose_intolerant":True
#		},
#		{
#		"age":29,
#		"name":"Joe",
#		"lactose_intolerant":False
#		}
#	]
#}


5.解决FizzBuzz(Jeff Atwood)

#FizzBuzz一个简单编程练习
#打印1~100,而3的倍数改打印成"Fizz",5的倍数改打印成"Buzz",既是3的倍数又是5的倍数则打印"FizzBuzz"
for x in range(1,101):
	print ("Fizz"[x%3*len("Fizz")::]+"Buzz"[x%5*len("Buzz")::] or x)
	
for x in range(1,51):
	print ("Fizz"[x%3*4:]+"Buzz"[x%5*4::] or x)		#实际运用获取list子集[start:end:step]功能，参考16

#"string"[num::]  #delete the num of letter from string head
#"string"[0::]="string"		"string"[2::]="ring"	"string"[4::]="ng"		#"string"[6::]=""(>6)
	
6.if语句在行内

print ("Hllo" if True else "World!")
#Hello


7.连接	#print有无括号有区别

ncf = ["Packers","49mer"]
afc = ["Ravens","Patriots"]
print (ncf + afc)
#["Packers","49mer","Ravens","Patriots"]

print (str(1)+' world')
#1 world

print (`1`+' world')
#1 world
#py37: error

print (1, 'world')
#py27:(1, 'world')
#py37: 1 world

print (ncf, 1)
#["Packers","49mer"]
#1


8.数值比较

x = 2
if 3 > x > 1:
	print (x)
#2
if 1 < x > 0:
	print (x)
#2


9.同时迭代两个列表

ncf = ["Packers","49mer"]
afc = ["Ravens","Patriots","Abs"]

for teama,teamb in zip(ncf,afc):	#zip(seq1[,seq2,...] -> [(seq1[0],seq2[0],...),(seq1[1],seq2[1],...),(...)]) tuples has the shortest elements 
	print (teama + ' vs. ' + teamb)
#Packers vs. Ravens
#49mer vs. Patriots


10.带索引index的列表迭代

teams = ["Packers","Ravens","49mer","Patriots"]

for index,team in enumerate(teams):
	print (index,team)
#0 Packers
#1 Ravens
#2 49mer
#3 Patriots


11.列表的推导式

numbers = [1,2,3,4,5]
even = []
for num in numbers:
	if num%2 == 0:
		even.append(num)

#<<==>>
even = [num for num in numbers if num%2==0]


12.字典推导式

some_list = ['apple','banana','cat','dog','egg']
print ({key:value for key,value in enumerate(some_list)})
#{0: 'apple', 1: 'banana', 2: 'cat', 3: 'dog', 4: 'egg'}

13.初始化列表的值

items = [0]*3
print (items)
#[0,0,0]


14.列表转换为字符串

some_list = ['apple','banana','cat','dog','egg']
print('-'.join(some_list))
#apple-banana-cat-dog-egg


15.从字典中提取元素(dict.get())

#origin (use try and except)

info = {'user':1,'name':'Max','heigh':'1.70m'}

try:
	is_admin = info['admin']
except KeyError:
	is_admin = False

#Optimized

is_admin = info.get('admin',False)	#if 'admin' exist, output its value, else output False or other definded value
print(is_admin)
#False


16.获取列表的子集

x =[1,2,3,4,5,6]
#前三
print(x[:3])
#[1,2,3]

#中四
print(x[1:5])	#[1:5] = index 1,2,3,4
#[2,3,4,5]

#后三
print(x[3:])	#[3:] = index 4,5,6
[4,5,6]

#奇数项
print(x[::2])	#index begin from 0 and step by 2 and last to the end
[1,3,5]

#偶数项
print(x[1::2])	#index begin from 1 and step by 2 and last to the end
[2,4,6]

#collections 中的 Counter 有时也适用
from collections import Counter
print(Counter'Hello')
#Counter({'l':2,'H':1,'e':1,'o':1})


17.迭代工具

#itertools库，类似collections库
#查找所有组合，返回一个组中元素的所有不同的组合方式

from itertools import combinations
some_list = ['apple','banana','cat','dog','egg']
for something in combinations(some_list,2):
	print(something)
#('apple', 'banana')
#('apple', 'cat')
#('apple', 'dog')
#('apple', 'egg')
#('banana', 'cat')
#('banana', 'dog')
#('banana', 'egg')
#('cat', 'dog')
#('cat', 'egg')
#('dog', 'egg')

#Size = (5*4)/(2*1)

for something in combinations(some_list,4):
	print(something)
#('apple', 'banana', 'cat', 'egg')
#('apple', 'banana', 'dog', 'egg')
#('apple', 'cat', 'dog', 'egg')
#('banana', 'cat', 'dog', 'egg')

#Size = (5*4*3*2*1)/(4*3*2*1)


18. False == True

# True & False 均为 global variables
False = True
if False:
	print("Hello")
else:
	print("World")
#Hello (py27,ok; py37,error)




